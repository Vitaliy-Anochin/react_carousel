{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","overallWidth","step","frameSize","itemWidth","animationDuration","position","prevDisabled","nextDisabled","scrollPrev","newWidth","setState","scrollNext","setFrameSize","value","result","Number","setItemWidth","setStep","setAnimationDuration","images","this","props","className","style","width","transform","transition","map","image","index","id","src","alt","type","onClick","disabled","min","max","onChange","event","target","React","Component","App","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ddae72db.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[],\n};\n\ntype State = {\n  overallWidth: number\n  step: number,\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  position: number,\n  prevDisabled: boolean,\n  nextDisabled: boolean,\n};\n\nexport class Carousel extends React.Component<Props, State> {\n  state: Readonly<State> = {\n    overallWidth: 1300,\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    position: 0,\n    prevDisabled: true,\n    nextDisabled: false,\n  };\n\n  scrollPrev = () => {\n    const {\n      overallWidth,\n      itemWidth,\n      position,\n      step,\n    } = this.state;\n\n    let newWidth = position - step * itemWidth;\n\n    if (newWidth <= 0) {\n      newWidth = 0;\n\n      this.setState({\n        position: newWidth,\n        prevDisabled: true,\n        nextDisabled: false,\n      });\n    }\n\n    if (newWidth > 0 && newWidth <= overallWidth) {\n      this.setState({\n        position: newWidth,\n        nextDisabled: false,\n      });\n    }\n  };\n\n  scrollNext = () => {\n    const {\n      overallWidth,\n      itemWidth,\n      step,\n      position,\n      frameSize,\n    } = this.state;\n\n    let newWidth = position + step * itemWidth;\n\n    if (newWidth >= overallWidth - itemWidth * frameSize) {\n      newWidth = overallWidth - itemWidth * frameSize;\n\n      this.setState({\n        position: newWidth,\n        prevDisabled: false,\n        nextDisabled: true,\n      });\n    }\n\n    if (newWidth > 0 && newWidth < overallWidth - itemWidth * frameSize) {\n      this.setState({\n        position: newWidth,\n        prevDisabled: false,\n      });\n    }\n  };\n\n  setFrameSize = (value: string) => {\n    const result = Number(value);\n\n    this.setState({ frameSize: result });\n  };\n\n  setItemWidth = (value: string) => {\n    const result = Number(value);\n\n    this.setState({\n      itemWidth: result,\n      overallWidth: result * 10,\n      position: 0,\n      prevDisabled: true,\n      nextDisabled: false,\n    });\n  };\n\n  setStep = (value: string) => {\n    const result = Number(value);\n\n    this.setState({ step: result });\n  };\n\n  setAnimationDuration = (value: string) => {\n    const result = Number(value);\n\n    this.setState({ animationDuration: result });\n  };\n\n  render() {\n    const { images } = this.props;\n\n    return (\n      <div\n        className=\"Carousel\"\n        style={{\n          width: `${this.state.frameSize * this.state.itemWidth}px`,\n        }}\n      >\n        <div\n          className=\"Carousel__container\"\n        >\n          <ul\n            className=\"Carousel__list\"\n            style={{\n              transform: `translateX(${-this.state.position}px)`,\n              transition: `${this.state.animationDuration}ms`,\n            }}\n          >\n            {images.map((image, index) => {\n              const id = index + 1;\n\n              return (\n                <li className=\"Carousel__item\" key={id}>\n                  <img\n                    src={image}\n                    alt={`${index + 1}`}\n                    className=\"Carousel__image\"\n                    style={{\n                      width: `${this.state.itemWidth}px`,\n                    }}\n                  />\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n        <div className=\"button\">\n          <button\n            type=\"button\"\n            onClick={this.scrollPrev}\n            disabled={this.state.prevDisabled}\n            className=\"button__click\"\n          >\n            Prev\n          </button>\n\n          <button\n            type=\"button\"\n            onClick={this.scrollNext}\n            disabled={this.state.nextDisabled}\n            className=\"button__click\"\n          >\n            Next\n          </button>\n        </div>\n        <form className=\"form\">\n          <label className=\"form__label\">\n            Step\n            <input\n              type=\"number\"\n              min={1}\n              max={5}\n              value={this.state.step}\n              onChange={(event) => {\n                this.setStep(event.target.value);\n              }}\n            />\n          </label>\n          <label className=\"form__label\">\n            Framesize\n            <input\n              type=\"number\"\n              min={1}\n              max={10}\n              value={this.state.frameSize}\n              onChange={(event) => {\n                this.setFrameSize(event.target.value);\n              }}\n            />\n          </label>\n\n          <label className=\"form__label\">\n            Item width\n            <input\n              type=\"range\"\n              min={130}\n              max={200}\n              value={this.state.itemWidth}\n              onChange={(event) => {\n                this.setItemWidth(event.target.value);\n              }}\n            />\n          </label>\n\n          <label className=\"form__label\">\n            Animatiom duration\n            <input\n              type=\"range\"\n              min={500}\n              max={5000}\n              step={500}\n              value={this.state.animationDuration}\n              onChange={(event) => {\n                this.setAnimationDuration(event.target.value);\n              }}\n            />\n          </label>\n        </form>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport './App.scss';\n\nimport { Carousel } from './components/Carousel';\n\ntype State = {\n  images: string[],\n};\n\nexport class App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n  };\n\n  render() {\n    const { images } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1 className=\"App_title\">\n          Carousel with\n          {' '}\n          {images.length}\n          {' '}\n          images\n        </h1>\n\n        <Carousel images={images} />\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}